// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feedback.proto

/*
Package feedback is a generated protocol buffer package.

It is generated from these files:
	feedback.proto

It has these top-level messages:
	PassengerFeedback
	Passenger
	Booking
	FeedbackRequest
	BookingRequest
	FeedbackResponse
	ListFeedbackResponse
*/
package feedback

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PassengerFeedback struct {
	ID          string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	PassengerID string `protobuf:"bytes,2,opt,name=passengerID" json:"passengerID,omitempty"`
	BookingCode string `protobuf:"bytes,3,opt,name=bookingCode" json:"bookingCode,omitempty"`
	Feedback    string `protobuf:"bytes,4,opt,name=feedback" json:"feedback,omitempty"`
}

func (m *PassengerFeedback) Reset()                    { *m = PassengerFeedback{} }
func (m *PassengerFeedback) String() string            { return proto.CompactTextString(m) }
func (*PassengerFeedback) ProtoMessage()               {}
func (*PassengerFeedback) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PassengerFeedback) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *PassengerFeedback) GetPassengerID() string {
	if m != nil {
		return m.PassengerID
	}
	return ""
}

func (m *PassengerFeedback) GetBookingCode() string {
	if m != nil {
		return m.BookingCode
	}
	return ""
}

func (m *PassengerFeedback) GetFeedback() string {
	if m != nil {
		return m.Feedback
	}
	return ""
}

type Passenger struct {
	ID       string               `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Feedback []*PassengerFeedback `protobuf:"bytes,2,rep,name=feedback" json:"feedback,omitempty"`
}

func (m *Passenger) Reset()                    { *m = Passenger{} }
func (m *Passenger) String() string            { return proto.CompactTextString(m) }
func (*Passenger) ProtoMessage()               {}
func (*Passenger) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Passenger) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Passenger) GetFeedback() []*PassengerFeedback {
	if m != nil {
		return m.Feedback
	}
	return nil
}

type Booking struct {
	Code        string             `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	PassengerID string             `protobuf:"bytes,2,opt,name=passengerID" json:"passengerID,omitempty"`
	Feedback    *PassengerFeedback `protobuf:"bytes,3,opt,name=feedback" json:"feedback,omitempty"`
}

func (m *Booking) Reset()                    { *m = Booking{} }
func (m *Booking) String() string            { return proto.CompactTextString(m) }
func (*Booking) ProtoMessage()               {}
func (*Booking) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Booking) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Booking) GetPassengerID() string {
	if m != nil {
		return m.PassengerID
	}
	return ""
}

func (m *Booking) GetFeedback() *PassengerFeedback {
	if m != nil {
		return m.Feedback
	}
	return nil
}

type FeedbackRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *FeedbackRequest) Reset()                    { *m = FeedbackRequest{} }
func (m *FeedbackRequest) String() string            { return proto.CompactTextString(m) }
func (*FeedbackRequest) ProtoMessage()               {}
func (*FeedbackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FeedbackRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type BookingRequest struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
}

func (m *BookingRequest) Reset()                    { *m = BookingRequest{} }
func (m *BookingRequest) String() string            { return proto.CompactTextString(m) }
func (*BookingRequest) ProtoMessage()               {}
func (*BookingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BookingRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type FeedbackResponse struct {
	ID     string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *FeedbackResponse) Reset()                    { *m = FeedbackResponse{} }
func (m *FeedbackResponse) String() string            { return proto.CompactTextString(m) }
func (*FeedbackResponse) ProtoMessage()               {}
func (*FeedbackResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FeedbackResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *FeedbackResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ListFeedbackResponse struct {
	Status   string               `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Feedback []*PassengerFeedback `protobuf:"bytes,2,rep,name=feedback" json:"feedback,omitempty"`
}

func (m *ListFeedbackResponse) Reset()                    { *m = ListFeedbackResponse{} }
func (m *ListFeedbackResponse) String() string            { return proto.CompactTextString(m) }
func (*ListFeedbackResponse) ProtoMessage()               {}
func (*ListFeedbackResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListFeedbackResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ListFeedbackResponse) GetFeedback() []*PassengerFeedback {
	if m != nil {
		return m.Feedback
	}
	return nil
}

func init() {
	proto.RegisterType((*PassengerFeedback)(nil), "PassengerFeedback")
	proto.RegisterType((*Passenger)(nil), "Passenger")
	proto.RegisterType((*Booking)(nil), "Booking")
	proto.RegisterType((*FeedbackRequest)(nil), "FeedbackRequest")
	proto.RegisterType((*BookingRequest)(nil), "BookingRequest")
	proto.RegisterType((*FeedbackResponse)(nil), "FeedbackResponse")
	proto.RegisterType((*ListFeedbackResponse)(nil), "ListFeedbackResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FeedbackService service

type FeedbackServiceClient interface {
	Add(ctx context.Context, in *PassengerFeedback, opts ...grpc.CallOption) (*FeedbackResponse, error)
	GetById(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*PassengerFeedback, error)
	GetByBookingCode(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*ListFeedbackResponse, error)
	Delete(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error)
}

type feedbackServiceClient struct {
	cc *grpc.ClientConn
}

func NewFeedbackServiceClient(cc *grpc.ClientConn) FeedbackServiceClient {
	return &feedbackServiceClient{cc}
}

func (c *feedbackServiceClient) Add(ctx context.Context, in *PassengerFeedback, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	out := new(FeedbackResponse)
	err := grpc.Invoke(ctx, "/FeedbackService/add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) GetById(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*PassengerFeedback, error) {
	out := new(PassengerFeedback)
	err := grpc.Invoke(ctx, "/FeedbackService/getById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) GetByBookingCode(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*ListFeedbackResponse, error) {
	out := new(ListFeedbackResponse)
	err := grpc.Invoke(ctx, "/FeedbackService/getByBookingCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) Delete(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	out := new(FeedbackResponse)
	err := grpc.Invoke(ctx, "/FeedbackService/delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FeedbackService service

type FeedbackServiceServer interface {
	Add(context.Context, *PassengerFeedback) (*FeedbackResponse, error)
	GetById(context.Context, *FeedbackRequest) (*PassengerFeedback, error)
	GetByBookingCode(context.Context, *BookingRequest) (*ListFeedbackResponse, error)
	Delete(context.Context, *FeedbackRequest) (*FeedbackResponse, error)
}

func RegisterFeedbackServiceServer(s *grpc.Server, srv FeedbackServiceServer) {
	s.RegisterService(&_FeedbackService_serviceDesc, srv)
}

func _FeedbackService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassengerFeedback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FeedbackService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).Add(ctx, req.(*PassengerFeedback))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FeedbackService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).GetById(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_GetByBookingCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).GetByBookingCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FeedbackService/GetByBookingCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).GetByBookingCode(ctx, req.(*BookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FeedbackService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).Delete(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeedbackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FeedbackService",
	HandlerType: (*FeedbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _FeedbackService_Add_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _FeedbackService_GetById_Handler,
		},
		{
			MethodName: "getByBookingCode",
			Handler:    _FeedbackService_GetByBookingCode_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _FeedbackService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feedback.proto",
}

func init() { proto.RegisterFile("feedback.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x4b, 0xf3, 0x40,
	0x10, 0x6e, 0xd2, 0xd2, 0xbe, 0x9d, 0x42, 0x3f, 0x86, 0x57, 0x09, 0x39, 0xd5, 0xc5, 0x43, 0x4f,
	0x2b, 0xd6, 0x9b, 0x78, 0xaa, 0x45, 0x28, 0x7a, 0x10, 0xbd, 0x0b, 0x69, 0x77, 0x2c, 0xa1, 0xd2,
	0x8d, 0xd9, 0xad, 0xe0, 0xd9, 0x9f, 0xea, 0x1f, 0x91, 0x7c, 0xaf, 0xc9, 0x82, 0x7a, 0xcb, 0xcc,
	0x3c, 0x33, 0xcf, 0x07, 0x59, 0x18, 0x3e, 0x13, 0x89, 0x75, 0xb0, 0xd9, 0xf1, 0x28, 0x96, 0x5a,
	0xb2, 0x0f, 0x07, 0x26, 0xf7, 0x81, 0x52, 0xb4, 0xdf, 0x52, 0x7c, 0x93, 0xcf, 0x70, 0x08, 0xee,
	0x6a, 0xe9, 0x39, 0x53, 0x67, 0xd6, 0x7f, 0x70, 0xc3, 0x25, 0x4e, 0x61, 0x10, 0x15, 0xa0, 0xd5,
	0xd2, 0x73, 0xd3, 0x81, 0xd9, 0x4a, 0x10, 0x6b, 0x29, 0x77, 0xe1, 0x7e, 0x7b, 0x2d, 0x05, 0x79,
	0xed, 0x0c, 0x61, 0xb4, 0xd0, 0x87, 0x7f, 0x05, 0xb7, 0xd7, 0x49, 0xc7, 0x65, 0xcd, 0x6e, 0xa1,
	0x5f, 0x8a, 0x68, 0x90, 0x73, 0x63, 0xd1, 0x9d, 0xb6, 0x67, 0x83, 0x39, 0xf2, 0x86, 0x64, 0xe3,
	0x98, 0x84, 0xde, 0x22, 0xe3, 0x45, 0x84, 0xce, 0x26, 0x91, 0x93, 0x1d, 0x4b, 0xbf, 0x7f, 0xe1,
	0xc5, 0x24, 0x4c, 0x8c, 0xfc, 0x44, 0x78, 0x02, 0xa3, 0xb2, 0x4b, 0xaf, 0x07, 0x52, 0xba, 0xee,
	0x81, 0x9d, 0xc2, 0x30, 0xd7, 0x54, 0x20, 0x2c, 0xd2, 0xd8, 0x25, 0x8c, 0xab, 0x43, 0x2a, 0x92,
	0x7b, 0x45, 0x8d, 0x34, 0x8e, 0xa1, 0xab, 0x74, 0xa0, 0x0f, 0x2a, 0x57, 0x9e, 0x57, 0xec, 0x09,
	0xfe, 0xdf, 0x85, 0x4a, 0x37, 0xf6, 0x2b, 0xbc, 0x63, 0xe2, 0xff, 0x9a, 0xea, 0xfc, 0xd3, 0xa9,
	0x5c, 0x3e, 0x52, 0xfc, 0x16, 0x6e, 0x08, 0x39, 0xb4, 0x03, 0x21, 0xd0, 0xb2, 0xe8, 0x4f, 0x78,
	0x5d, 0x09, 0x6b, 0xe1, 0x39, 0xf4, 0xb6, 0xa4, 0x17, 0xef, 0x2b, 0x81, 0x63, 0x5e, 0x8b, 0xcc,
	0xb7, 0x5c, 0x61, 0x2d, 0xbc, 0x82, 0x71, 0xba, 0xb2, 0x30, 0xfe, 0xa4, 0x11, 0xff, 0x9e, 0xa5,
	0x7f, 0xc4, 0x6d, 0xd6, 0x59, 0x0b, 0xcf, 0xa0, 0x2b, 0xe8, 0x85, 0x34, 0x59, 0xf8, 0x6c, 0x0a,
	0xd7, 0xdd, 0xf4, 0x55, 0x5c, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xd4, 0x40, 0x85, 0x27,
	0x03, 0x00, 0x00,
}
